provider "aws" {
  region = "us-west-2"  # Replace with your desired AWS region
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

resource "aws_eks_cluster" "example_cluster" {
  name     = "example-cluster"
  role_arn = aws_iam_role.cluster.arn

  vpc_config {
    subnet_ids = ["subnet-12345678", "subnet-98765432"]  # Replace with your desired subnet IDs
    security_group_ids = ["sg-12345678"]  # Replace with your desired security group IDs
  }
}

resource "aws_eks_node_group" "example_nodes" {
  cluster_name    = aws_eks_cluster.example_cluster.name
  node_group_name = "example-nodes"

  scaling_config {
    desired_size = 2  # Replace with your desired number of nodes
    min_size     = 1  # Replace with your desired minimum number of nodes
    max_size     = 3  # Replace with your desired maximum number of nodes
  }

  remote_access {
    ec2_ssh_key        = "my-keypair"  # Replace with the name of your EC2 key pair
    source_security_group_ids = ["sg-12345678"]  # Replace with your desired security group IDs
  }
}

resource "aws_iam_role" "cluster" {
  name = "example-cluster-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "cluster_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.cluster.name
}

resource "aws_iam_role_policy_attachment" "worker_node_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.cluster.name
}

resource "aws_iam_role_policy_attachment" "cni_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.cluster.name
}

resource "aws_lb" "example_lb" {
  name               = "example-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = ["sg-12345678"]  # Replace with your desired security group IDs
  subnets            = ["subnet-12345678", "subnet-98765432"]  # Replace with your desired subnet IDs
}

resource "aws_lb_target_group" "example_target_group" {
  name        = "example-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_eks_cluster.example_cluster.vpc_config[0].vpc_id
  target_type = "ip"
}

resource "aws_lb_listener" "example_listener" {
  load_balancer_arn = aws_lb.example_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.example_target_group.arn
  }
}

resource "aws_eks_ingress" "example_ingress" {
  cluster_name       = aws_eks_cluster.example_cluster.name
  namespace          = "default"
  name               = "example-ingress"
  annotations        = { "kubernetes.io/ingress.class" = "alb" }
  depends_on         = [aws_lb_listener.example_listener]

  spec {
    rule {
      host = "example.com"  # Replace with your desired hostname
      http {
        path {
          path    = "/*"
          backend {
            service_name = "example-service"
            service_port = 80
          }
        }
      }
    }
  }
}

resource "kubernetes_deployment" "example_deployment" {
  metadata {
    name = "example-deployment"
  }

  spec {
    selector {
      match_labels = {
        app = "example-app"
      }
    }

    template {
      metadata {
        labels = {
          app = "example-app"
        }
      }

      spec {
        container {
          image = "nginx:latest"
          name  = "example-container"
          port {
            container_port = 80
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "example_service" {
  metadata {
    name = "example-service"
  }

  spec {
    selector = {
      app = kubernetes_deployment.example_deployment.metadata[0].labels.app
    }

    port {
      port        = 80
      target_port = 80
    }

    type = "LoadBalancer"
  }
}
